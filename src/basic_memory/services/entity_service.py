"""Service for managing entities in the database."""
from datetime import datetime, UTC
from pathlib import Path
from typing import List

from basic_memory.repository.entity_repository import EntityRepository
from basic_memory.schemas import EntityIn, ObservationIn
from basic_memory.models import Entity, Observation
from basic_memory.fileio import EntityNotFoundError
from loguru import logger
from . import ServiceError


class EntityService:
    """
    Service for managing entities in the database.
    File operations are handled by MemoryService.
    """
    
    def __init__(self, project_path: Path, entity_repo: EntityRepository):
        self.project_path = project_path
        self.entity_repo = entity_repo
        logger.debug(f"Initialized EntityService with path: {project_path}")

    async def search(self, query: str) -> List[Entity]:
        """Search entities using LIKE pattern matching."""
        logger.debug(f"Searching entities with query: {query}")
        try:
            results = await self.entity_repo.search(query)
            logger.debug(f"Found {len(results)} matches")
            return results
        except Exception as e:
            logger.exception(f"Failed to search entities with query: {query}")
            raise

    async def create_entity(self, entity: EntityIn) -> Entity:
        """Create a new entity in the database.
        
        Note: ID is generated by the EntityIn validator before reaching this method.
        """
        logger.debug(f"Creating entity in DB: {entity.id}")
        try:
            # Create base entity first
            base_data = {
                "id": entity.id,  # Include the generated ID
                "name": entity.name,
                "entity_type": entity.entity_type,
                "created_at": datetime.now(UTC),
            }
            logger.debug(f"Base entity data: {base_data}")

            created_entity = await self.entity_repo.create(base_data)
            logger.debug(f"Created base entity: {created_entity.id}")

            await self.entity_repo.refresh(created_entity, ['observations', 'outgoing_relations', 'incoming_relations'])
            logger.debug(f"Refreshed entity relationships: {created_entity.id}")

            return created_entity
        except Exception as e:
            logger.exception(f"Failed to create entity: {entity.id}")
            raise

    async def get_entity(self, entity_id: str) -> Entity:
        """Get entity by ID."""
        logger.debug(f"Getting entity by ID: {entity_id}")
        try:
            db_entity = await self.entity_repo.find_by_id(entity_id)
            if not db_entity:
                logger.error(f"Entity not found: {entity_id}")
                raise EntityNotFoundError(f"Entity not found: {entity_id}")

            logger.debug(f"Found entity: {db_entity.id}")
            return db_entity
        except EntityNotFoundError:
            raise
        except Exception as e:
            logger.exception(f"Failed to get entity: {entity_id}")
            raise

    # TODO name is not unique
    async def get_by_name(self, name: str) -> Entity:
        """Get entity by name."""
        logger.debug(f"Getting entity by name: {name}")
        try:
            db_entity = await self.entity_repo.find_by_name(name)
            if not db_entity:
                logger.error(f"Entity not found: {name}")
                raise EntityNotFoundError(f"Entity not found: {name}")

            logger.debug(f"Found entity: {db_entity.id}")
            return db_entity
        except EntityNotFoundError:
            raise
        except Exception as e:
            logger.exception(f"Failed to get entity by name: {name}")
            raise

    async def delete_entity(self, entity_id: str) -> bool:
        """Delete entity from database."""
        logger.debug(f"Deleting entity: {entity_id}")
        try:
            result = await self.entity_repo.delete(entity_id)
            logger.debug(f"Entity deleted: {entity_id}")
            return result
        except Exception as e:
            logger.exception(f"Failed to delete entity: {entity_id}")
            raise